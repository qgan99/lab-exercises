5+5
print("hi")
# Assign your name to the variable `my_name`
my_name <- Steve
# Assign your name to the variable `my_name`
my_name <- "Steve
# Assign your height (in inches) to a variable `my_height`
# Create a variable `puppies` equal to the number of puppies you'd like to have
# Create a variable `puppy_price`, which is how much you think a puppy costs
# Create a variable `total_cost` that has the total cost of all of your puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
# Assign your name to the variable `my_name`
my_name <- "Steve"
`max_puppies`, which is the number of puppies you can
# afford for $1,000
# Create a variable `hometown` that stores the city in which you were born
hometown <- "singapore"
# Assign your name to the variable `my_name`
my_name <- "Steve"
# Create a variable `hometown` that stores the city in which you were born
hometown <- "singapore"
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro + fruits_o)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 0, 13)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 0, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(a, ee)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro + fruits_o)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub(a, o, fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro + fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro fruits_o)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
print(lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruits_e
install.packages("stringr")
library("stringr")
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro + fruits_o)
print(height_in_meters)
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x){
result <- x + 3
result
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric(x, y){
meters <- x * 3.048 + y *3.048 / 12
meters
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric(x, y){
meters <- x * 3.048 + y *3.048 / 12
meters
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(x, y){
meters <- x * 3.048 + y *3.048 / 12
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 6)
print(height_in_meters)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10,1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, .1)
print(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
print(wave)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
print(wave)
view(iris_df)
iris_df <- data.frame(iris)
view(iris_df)
# Select all values of data frame for Sepal.length
view(iris)
# Select all values of data frame for Sepal.length
1+1
View(iris_df)
View(iris_df)
# Select all values of data frame for Sepal.length
seapl_length <- iris_df[[1]]
print(sepal_length)
# Select all values of data frame for Sepal.length
seapal_length <- iris_df[[1]]
print(sepal_length)
# Select all values of data frame for Sepal.length
sepal_length <- iris_df[[1]]
print(sepal_length)
# Select only rows of Virginica flowers
sepal_length <- iris_df[[5]] = "virginical"
# Select only rows of Virginica flowers
sepal_length <- iris_df[[5 == "virginical"]]
# Select only rows of Virginica flowers
sepal_length <- iris_df[[5 = "virginical"]]
# Select all values of data frame for Sepal.length
sepal_length <- iris_df$Sepal.Length
print(sepal_length)
# Select only rows of Virginica flowers
virginicas <- c(iris_df$Species = "Virginica")
# Select only rows of Virginica flowers
virginicas <- iris_df[[iris_df$Species = "Virginica"]]
iris$Sepal.Length
# Select only rows of Virginica flowers
virginicas <- iris[[iris$Species == "Virginica"]]
# Select only rows of Virginica flowers
virginicas <- iris[[iris$Species == 'Virginica']]
# Select only rows of Virginica flowers
virginicas <- iris[iris$Species == 'Virginica']
print(virginicas)
# Select only rows of Virginica flowers
virginicas <- iris[iris$Species == 'Virginica', ]
print(virginicas)
view(virginicas)
# Select rows where Petal.Length > 4.0
iris[iris$Petal.Length > 4]
# Select rows where Petal.Length > 4.0
iris[iris$Petal.Length > 4, ]
iris$Petal.Length > 4
iris_df$Sepal.Length
# Select only rows of Virginica flowers
virginicas <- iris_df[iris_df$Species == 'Virginica', ]
# Select only the sepal legnth of the Virginica flowers
virginica$Sepal.Length
# Select only the sepal legnth of the Virginica flowers
virginicas$Sepal.Length
# Select only rows of Virginica flowers
virginicas <- iris_df[iris_df$Species == 'Virginica', ]
View(virginicas)
View(virginicas)
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris_df$petal_length_greater <- iris%Petal.Length > 4
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris_df$petal_length_greater <- iris$Petal.Length > 4
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris_df$petal_length_greater <- iris_df$Petal.Length > 4
# Exercise 7: DPLYR practice with NBA data
# install.packages("dplyr")
library(dplyr)
setwd("C:/Users/scarletstorm/lab-exercises/week-4")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv(team.csv, stringsAsFactors = FALSE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv(data/team.csv, stringsAsFactors = FALSE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv('data/team.csv', stringsAsFactors = FALSE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv('data/team.csv', stringsAsFactors = FALSE)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team <- read.csv('data/teams.csv', stringsAsFactors = FALSE)
View(team)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
teams <- read.csv('data/teams.csv', stringsAsFactors = FALSE)
View(team)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
teams <- read.csv('data/teams.csv', stringsAsFactors = FALSE)
View(teams)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutatue(teams, ration, TOV/STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutate(teams, ration, TOV/STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutate(teams, ratio = TOV/STL)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
teams <- read.csv('data/teams.csv', stringsAsFactors = FALSE)
View(teams)
View(teams)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutate(teams, ratio = TOV/STL)
# The data.frame team.data should now be accessible to you.
# View it, and get some basic information about the number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*"
# following the names of teams that made it to the playoffs that year.
print(ncol(teams))
print(nrow(teams))
# Sort the teams from lowest turnover/steal ratio to highest
arrange(teams, ration)
# Sort the teams from lowest turnover/steal ratio to highest
arrange(teams, ratio)
# Sort the teams from lowest turnover/steal ratio to highest
arranged_teams <- arrange(teams, ratio)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutated teams <- mutate(teams, ratio = TOV/STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutated_teams <- mutate(teams, ratio = TOV/STL)
# Sort the teams from lowest turnover/steal ratio to highest
arranged_teams <- arrange(mutated_teams, ratio)
View(arranged_teams)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
print(arrange(teams, TRB)[1, "team"])
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
new <- arrange(teams, TRB) #[1, "team"]
print(new)
View(new)
print(filter(teams, TRB = max(teams$TRB)))
print(filter(teams, TRB == max(teams$TRB)))
print(filter(teams, TRB == max(teams$TRB))[1, 2])
# Read in the Pokemon data from the data directory
# into a variable called `pokemon` using `read.csv`. Remember to not read strings in as factors.
pokemon <- read.csv('data/Pokemon.csv', stringsAsFactors = FALSE)
View(pokemon)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
water.pkm <- filter(pokemon, Type.1 == "Water")
View(water.pkm)
# Group the pokemon by Type 2 and save into a descriptive variable.
arranged_by_two <- arrange(water.pkm, Type.2)
View(arranged_by_two)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
print(filter(teams, TRB == max(teams$TRB)) %>% select(Team, TRB))
